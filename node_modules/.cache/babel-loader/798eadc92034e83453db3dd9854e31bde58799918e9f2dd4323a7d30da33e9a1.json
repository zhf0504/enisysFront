{"ast":null,"code":"// composables/useCommonService.js\n\nexport function useCommonService() {\n  // 各日本の元号とその開始日を定義\n  const eras = [{\n    name: '令和',\n    start: new Date(2019, 4, 1)\n  },\n  // 令和は2019年5月1日から\n  {\n    name: '平成',\n    start: new Date(1989, 0, 8)\n  },\n  // 平成は1989年1月8日から\n  {\n    name: '昭和',\n    start: new Date(1926, 11, 25)\n  },\n  // 昭和は1926年12月25日から\n  {\n    name: '大正',\n    start: new Date(1912, 6, 30)\n  },\n  // 大正は1912年7月30日から\n  {\n    name: '明治',\n    start: new Date(1868, 0, 25)\n  } // 明治は1868年1月25日から\n  ];\n\n  // 'yyyy年MM月dd日'形式の日付文字列をDateオブジェクトに変換する関数\n  const parseJapaneseDate = dateStr => {\n    const regex = /^(\\d{4})年(\\d{1,2})月(\\d{1,2})日$/;\n    const match = dateStr.match(regex);\n    if (match) {\n      // 年・月・日をそれぞれ取得し、Dateオブジェクトを生成\n      const year = parseInt(match[1], 10);\n      const month = parseInt(match[2], 10) - 1; // 月は0-11で指定する必要がある\n      const day = parseInt(match[3], 10);\n      return new Date(year, month, day);\n    }\n    return null;\n  };\n\n  // 日本の元号を取得する関数\n  const getJapaneseEra = dateStr => {\n    const date = parseJapaneseDate(dateStr); // 日付文字列をDate型に変換\n    if (!date) return '日付が無効です';\n    for (const era of eras) {\n      if (date >= era.start) {\n        // 元号の年数を計算して返す\n        const year = date.getFullYear() - era.start.getFullYear() + 1;\n        return `${era.name}${year}年${date.getMonth() + 1}月${date.getDate()}日`;\n      }\n    }\n    return '日付が無効です';\n  };\n\n  // 年齢を計算する関数 (誕生日を過ぎたかどうかも計算)\n  const calculateAge = birthDateStr => {\n    const birthDate = parseJapaneseDate(birthDateStr); // 日付文字列をDate型に変換\n    if (!birthDate) return '無効な日付です';\n    const currentDate = new Date();\n    let age = currentDate.getFullYear() - birthDate.getFullYear();\n\n    // 今年の誕生日が過ぎたかどうかをチェック\n    const birthdayThisYear = new Date(currentDate.getFullYear(), birthDate.getMonth(), birthDate.getDate());\n    if (currentDate < birthdayThisYear) {\n      age--; // まだ誕生日が来ていない場合、1歳減らす\n    }\n    if (age <= 0) {\n      age = '0 歳';\n    } else {\n      age = age + ' 歳';\n    }\n    return age;\n  };\n\n  /**\r\n   * 数値を通貨形式 (例: 2,000,000 円) にフォーマットするメソッド\r\n   * @param {number|string|Event} input - 数値またはイベントオブジェクト\r\n   * @returns {string} - フォーマットされた文字列 (イベントの場合は値を更新)\r\n   */\n  const formatCurrency = input => {\n    let value = '';\n\n    // Eventオブジェクトの場合 //TODO削除\n    if (input instanceof Event) {\n      const target = input.target;\n      if (!target.value) return '0 円';\n      value = target.value.replace(/[^\\d]/g, ''); // 数字以外を削除\n      const parsedValue = parseInt(value, 10);\n      return isNaN(parsedValue) ? '0 円' : parsedValue.toLocaleString() + ' 円';\n    } else {\n      // 数値または文字列として渡された場合\n      if (!input) return '0 円';\n      value = typeof input === 'string' ? input.replace(/[^\\d]/g, '') : input;\n      const parsedValue = parseInt(value, 10);\n      return isNaN(parsedValue) ? '0 円' : parsedValue.toLocaleString() + ' 円';\n    }\n  };\n\n  /**\r\n   * 日付を日本のフォーマットに変換します。\r\n   * @param {dateString} dateString (v-modelの値を変更)\r\n   * @returns {string} - フォーマット済みの日付文字列「yyyy年mm月dd日」\r\n   */\n  const formatDateToJapan = dateString => {\n    if (!dateString) return '';\n    const year = dateString.getFullYear();\n    const month = String(dateString.getMonth() + 1).padStart(2, '0');\n    const day = String(dateString.getDate()).padStart(2, '0');\n    //画面上で選択した生年月日\n    const date = `${year}年${month}月${day}日`;\n    return date;\n  };\n\n  /**\r\n   * フォーカスする時、カンマを外す処理\r\n   * @param {valueRef} valueRef 変換する変数\r\n   * @returns {valueRef} valueRef 変換する変数\r\n   */\n  const formatMoneyFocusIn = valueRef => {\n    console.log(valueRef);\n    if (valueRef) {\n      valueRef = valueRef.replace(/,/g, '');\n    }\n    return valueRef;\n  };\n  /**\r\n   * フォーカスアウトする時、カンマをつける処理\r\n   * @param {valueRef} valueRef 変換する変数\r\n   * @returns {valueRef} valueRef 変換する変数\r\n   */\n  const formatMoneyFocusOut = valueRef => {\n    console.log(valueRef);\n    if (valueRef) {\n      valueRef = valueRef.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n    }\n    return valueRef;\n  };\n\n  /**\r\n   * リスト内の「初期表示用」\r\n   * @param {Array} valueList 処理する値のリスト\r\n   * @returns {Array} 処理後のリスト\r\n   */\n  const formatMoneyForList = valueList => {\n    if (Array.isArray(valueList)) {\n      return valueList.map(valueRef => formatMoneyFocusOut(valueRef));\n    }\n    return [];\n  };\n\n  /**\r\n   * 任意のフィールドにカンマを追加する処理\r\n   * @param {Array} table 処理するテーブル（配列）\r\n   * @param {string} field フォーマットするフィールド名\r\n   * @returns {Array} 処理後のテーブル\r\n   */\n  const formatFieldInTable = (table, field) => {\n    return table.map(row => {\n      if (row[field] !== null && row[field] !== undefined) {\n        row[field] = formatMoneyFocusOut(row[field]);\n      }\n      return row;\n    });\n  };\n\n  /**\r\n   * 入力欄が数字のみの制限処理\r\n   * @param {event} event\r\n   */\n  const blockNonNumeric = event => {\n    if (!/^\\d$/.test(event.key) && event.key !== 'Backspace' && event.key !== 'Delete') {\n      event.preventDefault();\n    }\n  };\n\n  /**\r\n   * SP版DateInputキーボード表示させない処理\r\n   * @param {event} event\r\n   *\r\n   */\n  const hiddenKeyBoardSP = event => {\n    event.target.blur();\n  };\n  return {\n    getJapaneseEra,\n    calculateAge,\n    formatCurrency,\n    formatDateToJapan,\n    hiddenKeyBoardSP,\n    formatMoneyFocusIn,\n    formatMoneyFocusOut,\n    formatMoneyForList,\n    blockNonNumeric,\n    formatFieldInTable\n  };\n}","map":{"version":3,"names":["useCommonService","eras","name","start","Date","parseJapaneseDate","dateStr","regex","match","year","parseInt","month","day","getJapaneseEra","date","era","getFullYear","getMonth","getDate","calculateAge","birthDateStr","birthDate","currentDate","age","birthdayThisYear","formatCurrency","input","value","Event","target","replace","parsedValue","isNaN","toLocaleString","formatDateToJapan","dateString","String","padStart","formatMoneyFocusIn","valueRef","console","log","formatMoneyFocusOut","formatMoneyForList","valueList","Array","isArray","map","formatFieldInTable","table","field","row","undefined","blockNonNumeric","event","test","key","preventDefault","hiddenKeyBoardSP","blur"],"sources":["C:/Users/zhenghoufeng/Desktop/project/enisysFront1/src/composables/useCommonService.js"],"sourcesContent":["// composables/useCommonService.js\r\n\r\nexport function useCommonService() {\r\n  // 各日本の元号とその開始日を定義\r\n  const eras = [\r\n    { name: '令和', start: new Date(2019, 4, 1) }, // 令和は2019年5月1日から\r\n    { name: '平成', start: new Date(1989, 0, 8) }, // 平成は1989年1月8日から\r\n    { name: '昭和', start: new Date(1926, 11, 25) }, // 昭和は1926年12月25日から\r\n    { name: '大正', start: new Date(1912, 6, 30) }, // 大正は1912年7月30日から\r\n    { name: '明治', start: new Date(1868, 0, 25) } // 明治は1868年1月25日から\r\n  ];\r\n\r\n  // 'yyyy年MM月dd日'形式の日付文字列をDateオブジェクトに変換する関数\r\n  const parseJapaneseDate = (dateStr) => {\r\n    const regex = /^(\\d{4})年(\\d{1,2})月(\\d{1,2})日$/;\r\n    const match = dateStr.match(regex);\r\n    if (match) {\r\n      // 年・月・日をそれぞれ取得し、Dateオブジェクトを生成\r\n      const year = parseInt(match[1], 10);\r\n      const month = parseInt(match[2], 10) - 1; // 月は0-11で指定する必要がある\r\n      const day = parseInt(match[3], 10);\r\n      return new Date(year, month, day);\r\n    }\r\n    return null;\r\n  };\r\n\r\n  // 日本の元号を取得する関数\r\n  const getJapaneseEra = (dateStr) => {\r\n    const date = parseJapaneseDate(dateStr); // 日付文字列をDate型に変換\r\n    if (!date) return '日付が無効です';\r\n\r\n    for (const era of eras) {\r\n      if (date >= era.start) {\r\n        // 元号の年数を計算して返す\r\n        const year = date.getFullYear() - era.start.getFullYear() + 1;\r\n        return `${era.name}${year}年${date.getMonth() + 1}月${date.getDate()}日`;\r\n      }\r\n    }\r\n    return '日付が無効です';\r\n  };\r\n\r\n  // 年齢を計算する関数 (誕生日を過ぎたかどうかも計算)\r\n  const calculateAge = (birthDateStr) => {\r\n    const birthDate = parseJapaneseDate(birthDateStr); // 日付文字列をDate型に変換\r\n    if (!birthDate) return '無効な日付です';\r\n\r\n    const currentDate = new Date();\r\n    let age = currentDate.getFullYear() - birthDate.getFullYear();\r\n\r\n    // 今年の誕生日が過ぎたかどうかをチェック\r\n    const birthdayThisYear = new Date(currentDate.getFullYear(), birthDate.getMonth(), birthDate.getDate());\r\n    if (currentDate < birthdayThisYear) {\r\n      age--; // まだ誕生日が来ていない場合、1歳減らす\r\n    }\r\n\r\n    if (age <= 0) {\r\n      age = '0 歳';\r\n    } else {\r\n      age = age + ' 歳';\r\n    }\r\n    return age;\r\n  };\r\n\r\n  /**\r\n   * 数値を通貨形式 (例: 2,000,000 円) にフォーマットするメソッド\r\n   * @param {number|string|Event} input - 数値またはイベントオブジェクト\r\n   * @returns {string} - フォーマットされた文字列 (イベントの場合は値を更新)\r\n   */\r\n  const formatCurrency = (input) => {\r\n    let value = '';\r\n\r\n    // Eventオブジェクトの場合 //TODO削除\r\n    if (input instanceof Event) {\r\n      const target = input.target;\r\n      if (!target.value) return '0 円';\r\n      value = target.value.replace(/[^\\d]/g, ''); // 数字以外を削除\r\n      const parsedValue = parseInt(value, 10);\r\n      return isNaN(parsedValue) ? '0 円' : parsedValue.toLocaleString() + ' 円';\r\n    } else {\r\n      // 数値または文字列として渡された場合\r\n      if (!input) return '0 円';\r\n      value = typeof input === 'string' ? input.replace(/[^\\d]/g, '') : input;\r\n      const parsedValue = parseInt(value, 10);\r\n      return isNaN(parsedValue) ? '0 円' : parsedValue.toLocaleString() + ' 円';\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 日付を日本のフォーマットに変換します。\r\n   * @param {dateString} dateString (v-modelの値を変更)\r\n   * @returns {string} - フォーマット済みの日付文字列「yyyy年mm月dd日」\r\n   */\r\n  const formatDateToJapan = (dateString) => {\r\n    if (!dateString) return '';\r\n    const year = dateString.getFullYear();\r\n    const month = String(dateString.getMonth() + 1).padStart(2, '0');\r\n    const day = String(dateString.getDate()).padStart(2, '0');\r\n    //画面上で選択した生年月日\r\n    const date = `${year}年${month}月${day}日`;\r\n    return date;\r\n  };\r\n\r\n  /**\r\n   * フォーカスする時、カンマを外す処理\r\n   * @param {valueRef} valueRef 変換する変数\r\n   * @returns {valueRef} valueRef 変換する変数\r\n   */\r\n  const formatMoneyFocusIn = (valueRef) => {\r\n    console.log(valueRef);\r\n\r\n    if (valueRef) {\r\n      valueRef = valueRef.replace(/,/g, '');\r\n    }\r\n    return valueRef;\r\n  };\r\n  /**\r\n   * フォーカスアウトする時、カンマをつける処理\r\n   * @param {valueRef} valueRef 変換する変数\r\n   * @returns {valueRef} valueRef 変換する変数\r\n   */\r\n  const formatMoneyFocusOut = (valueRef) => {\r\n    console.log(valueRef);\r\n    if (valueRef) {\r\n      valueRef = valueRef.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n    }\r\n    return valueRef;\r\n  };\r\n\r\n  /**\r\n   * リスト内の「初期表示用」\r\n   * @param {Array} valueList 処理する値のリスト\r\n   * @returns {Array} 処理後のリスト\r\n   */\r\n  const formatMoneyForList = (valueList) => {\r\n    if (Array.isArray(valueList)) {\r\n      return valueList.map((valueRef) => formatMoneyFocusOut(valueRef));\r\n    }\r\n    return [];\r\n  };\r\n\r\n  /**\r\n   * 任意のフィールドにカンマを追加する処理\r\n   * @param {Array} table 処理するテーブル（配列）\r\n   * @param {string} field フォーマットするフィールド名\r\n   * @returns {Array} 処理後のテーブル\r\n   */\r\n  const formatFieldInTable = (table, field) => {\r\n    return table.map((row) => {\r\n      if (row[field] !== null && row[field] !== undefined) {\r\n        row[field] = formatMoneyFocusOut(row[field]);\r\n      }\r\n      return row;\r\n    });\r\n  };\r\n\r\n  /**\r\n   * 入力欄が数字のみの制限処理\r\n   * @param {event} event\r\n   */\r\n  const blockNonNumeric = (event) => {\r\n    if (!/^\\d$/.test(event.key) && event.key !== 'Backspace' && event.key !== 'Delete') {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * SP版DateInputキーボード表示させない処理\r\n   * @param {event} event\r\n   *\r\n   */\r\n  const hiddenKeyBoardSP = (event) => {\r\n    event.target.blur();\r\n  };\r\n\r\n  return {\r\n    getJapaneseEra,\r\n    calculateAge,\r\n    formatCurrency,\r\n    formatDateToJapan,\r\n    hiddenKeyBoardSP,\r\n    formatMoneyFocusIn,\r\n    formatMoneyFocusOut,\r\n    formatMoneyForList,\r\n    blockNonNumeric,\r\n    formatFieldInTable\r\n  };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}