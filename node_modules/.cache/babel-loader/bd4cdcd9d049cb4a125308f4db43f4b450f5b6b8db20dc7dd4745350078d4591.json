{"ast":null,"code":"// src/store/modules/auth.js\n/**\r\n * note: メモ\r\n *\r\n * user                           // ログイン中のユーザー名\r\n * token                          // バックエンドからもらったトークン\r\n * menuisOpen                     // PC版のメニュー開閉フラグ   true:開     false:閉     default:開\r\n * MemSearch                      // 会員検索画面で検索後に表示できる権限「true」を設定します。\r\n *\r\n */\nconst state = {\n  user: null,\n  // 現在のユーザー名\n  token: null,\n  // 認証用のトークン\n  menuisOpen: true,\n  //PC版のメニュー開閉フラグ\n  MemSearch: true // 「true」の場合、会員一覧が表示できます。\n};\nconst mutations = {\n  setUser(state, user) {\n    // ユーザー情報を設定する\n    state.user = user;\n  },\n  setToken(state, token) {\n    // トークン情報を設定する\n    state.token = token;\n  },\n  setPermission(state, {\n    flag,\n    value\n  }) {\n    // 権限フラグを設定する\n    state[flag] = value;\n  },\n  setMenuisOpen(state, menuisOpen) {\n    // PC版のメニュー開閉フラグ\n    state.menuisOpen = menuisOpen;\n  },\n  logout(state) {\n    // ログアウト処理\n    state.user = null;\n    state.token = null;\n    state.MemSearch = false;\n    state.menuisOpen = true;\n    sessionStorage.removeItem('token'); // トークンをセッションから削除\n    sessionStorage.removeItem('user'); // ユーザー情報をセッションから削除\n  }\n};\nconst actions = {\n  login({\n    commit\n  }, {\n    user,\n    token\n  }) {\n    // ログイン時の処理\n    commit('setUser', user);\n    commit('setToken', token);\n    sessionStorage.setItem('token', token); // セッションにトークンを保存\n    sessionStorage.setItem('user', JSON.stringify(user)); // セッションにユーザー情報を保存\n  },\n  initializeStore({\n    commit\n  }) {\n    // ストアの初期化\n    const token = sessionStorage.getItem('token');\n    const user = sessionStorage.getItem('user');\n    if (token) {\n      commit('setToken', token); // トークンをコミット\n      commit('setUser', JSON.parse(user)); // ユーザー情報をコミット\n    }\n  },\n  logout({\n    commit\n  }) {\n    // ログアウト処理\n    commit('setUser', null);\n    commit('setToken', null);\n    sessionStorage.removeItem('token'); // セッションからトークンを削除\n    sessionStorage.removeItem('user'); // セッションからユーザー情報を削除\n  },\n  updatePermission({\n    commit\n  }, {\n    flag,\n    value\n  }) {\n    // フラグを更新する\n    commit('setPermission', {\n      flag,\n      value\n    });\n  },\n  updateMenuisOpen({\n    commit\n  }, menuisOpen) {\n    // メニュー開閉フラグを更新する\n    commit('setMenuisOpen', menuisOpen); // 'setMenuisOpen' mutationを呼び出す\n  }\n};\nconst getters = {\n  isAuthenticated: state => !!state.token,\n  // ユーザーが認証されているかどうか\n  getUser: state => state.user,\n  // 現在のユーザー情報を取得\n  hasMemSearchAccess: state => state.MemSearch,\n  // 会員一覧アクセスの権限を取得\n  getMenuisOpen: state => state.menuisOpen //PC版のメニュー開閉フラグを取得\n};\nexport default {\n  namespaced: true,\n  state,\n  mutations,\n  actions,\n  getters\n};","map":{"version":3,"names":["state","user","token","menuisOpen","MemSearch","mutations","setUser","setToken","setPermission","flag","value","setMenuisOpen","logout","sessionStorage","removeItem","actions","login","commit","setItem","JSON","stringify","initializeStore","getItem","parse","updatePermission","updateMenuisOpen","getters","isAuthenticated","getUser","hasMemSearchAccess","getMenuisOpen","namespaced"],"sources":["C:/Users/zhenghoufeng/Desktop/project/enisysFront1/src/store/modules/auth.js"],"sourcesContent":["// src/store/modules/auth.js\r\n/**\r\n * note: メモ\r\n *\r\n * user                           // ログイン中のユーザー名\r\n * token                          // バックエンドからもらったトークン\r\n * menuisOpen                     // PC版のメニュー開閉フラグ   true:開     false:閉     default:開\r\n * MemSearch                      // 会員検索画面で検索後に表示できる権限「true」を設定します。\r\n *\r\n */\r\nconst state = {\r\n  user: null, // 現在のユーザー名\r\n  token: null, // 認証用のトークン\r\n  menuisOpen: true, //PC版のメニュー開閉フラグ\r\n  MemSearch: true // 「true」の場合、会員一覧が表示できます。\r\n};\r\n\r\nconst mutations = {\r\n  setUser(state, user) {\r\n    // ユーザー情報を設定する\r\n    state.user = user;\r\n  },\r\n  setToken(state, token) {\r\n    // トークン情報を設定する\r\n    state.token = token;\r\n  },\r\n  setPermission(state, { flag, value }) {\r\n    // 権限フラグを設定する\r\n    state[flag] = value;\r\n  },\r\n  setMenuisOpen(state, menuisOpen) {\r\n    // PC版のメニュー開閉フラグ\r\n    state.menuisOpen = menuisOpen;\r\n  },\r\n  logout(state) {\r\n    // ログアウト処理\r\n    state.user = null;\r\n    state.token = null;\r\n    state.MemSearch = false;\r\n    state.menuisOpen = true;\r\n    sessionStorage.removeItem('token'); // トークンをセッションから削除\r\n    sessionStorage.removeItem('user'); // ユーザー情報をセッションから削除\r\n  }\r\n};\r\n\r\nconst actions = {\r\n  login({ commit }, { user, token }) {\r\n    // ログイン時の処理\r\n    commit('setUser', user);\r\n    commit('setToken', token);\r\n    sessionStorage.setItem('token', token); // セッションにトークンを保存\r\n    sessionStorage.setItem('user', JSON.stringify(user)); // セッションにユーザー情報を保存\r\n  },\r\n  initializeStore({ commit }) {\r\n    // ストアの初期化\r\n    const token = sessionStorage.getItem('token');\r\n    const user = sessionStorage.getItem('user');\r\n\r\n    if (token) {\r\n      commit('setToken', token); // トークンをコミット\r\n      commit('setUser', JSON.parse(user)); // ユーザー情報をコミット\r\n    }\r\n  },\r\n  logout({ commit }) {\r\n    // ログアウト処理\r\n    commit('setUser', null);\r\n    commit('setToken', null);\r\n    sessionStorage.removeItem('token'); // セッションからトークンを削除\r\n    sessionStorage.removeItem('user'); // セッションからユーザー情報を削除\r\n  },\r\n  updatePermission({ commit }, { flag, value }) {\r\n    // フラグを更新する\r\n    commit('setPermission', { flag, value });\r\n  },\r\n  updateMenuisOpen({ commit }, menuisOpen) {\r\n    // メニュー開閉フラグを更新する\r\n    commit('setMenuisOpen', menuisOpen); // 'setMenuisOpen' mutationを呼び出す\r\n  }\r\n};\r\n\r\nconst getters = {\r\n  isAuthenticated: (state) => !!state.token, // ユーザーが認証されているかどうか\r\n  getUser: (state) => state.user, // 現在のユーザー情報を取得\r\n  hasMemSearchAccess: (state) => state.MemSearch, // 会員一覧アクセスの権限を取得\r\n  getMenuisOpen: (state) => state.menuisOpen //PC版のメニュー開閉フラグを取得\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  mutations,\r\n  actions,\r\n  getters\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}